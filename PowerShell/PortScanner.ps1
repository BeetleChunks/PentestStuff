Function Check-Port {
	Param(
		[Parameter(Mandatory=$true)]
		[String]$hostname,
		[Parameter(Mandatory=$true)]
		[Double]$port,
		[Double]$timeout
	)

	If (!$timeout) {
		$timeout = 100 # ms
	}

	$reqcallback = $state = $null
	$socket = New-Object Net.Sockets.TcpClient

	$begincon = $socket.BeginConnect($hostname, $port, $reqcallback, $state)

	Start-Sleep -milli $timeout

	if ($socket.Connected) {
		Write-Output "open, $hostname, $port"
	
	} else {
		Write-Output "closed, $hostname, $port"
	
	}

	$socket.close()
}

Function Invoke-Portscanner {
	Param(
		[Parameter(Mandatory=$true)]
		[Double[]]$ports,
		[String[]]$hosts,
		[String]$hostfile
	)

	if (!$hosts) {
		if (!$hostfile) {
			throw ("'hosts' or 'hostfile' must be supplied.")
		} else {
			$hosts = @()
			$numhosts = 0

			foreach($hostname in Get-Content $hostfile) {
				$hosts += @($hostname)
				$numhosts += 1
			}
		}
	} else {
		$numhosts = 0

		foreach($hostname in $hosts) {
			$numhosts += 1
		}
	}

	Write-Verbose "Loaded $numhosts hosts to scan"
	Write-Output "State, Hostname, Port"

	foreach($port in $ports) {
		foreach($hostname in $hosts) {
			Check-Port -hostname $hostname -port $port
		}
	}
}
